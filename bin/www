#!/usr/bin/env node
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('node:server');
var http = require('http');
var common = require('../assets/common');

// enable https
if (common.sslEnable) {
  const https = require('https');

  // add https license, please add pem key
  const sslOptions = {
    key: fs.readFileSync('./keys/private.key'),
    cert: fs.readFileSync('./keys/cert.pem')
  };

  const sslPort = common.sslPort;
  app.set('sslPort', sslPort);

  const httpsServer = https.createServer(sslOptions, app);

  httpsServer.listen(sslPort);
  console.log(`ssl started on port ${sslPort}`);
}


var port = process.env.PORT || common.port;

app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

console.log(`started on port ${port}`);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
